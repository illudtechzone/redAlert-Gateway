/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.redalert.client.friends_microservice.api;

import com.illud.redalert.client.friends_microservice.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-07-19T10:39:16.656+05:30[Asia/Kolkata]")

@Api(value = "UserController", description = "the UserController API")
public interface UserControllerApi {

    @ApiOperation(value = "acceptFriendRequest", nickname = "acceptFriendRequestUsingPOST", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/user/{userId}/accept/{friendId}",
        produces = "*/*", 
        method = RequestMethod.POST)
    ResponseEntity<User> acceptFriendRequestUsingPOST(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "friendId",required=true) @PathVariable("friendId") String friendId);


    @ApiOperation(value = "cancelFriendRequest", nickname = "cancelFriendRequestUsingDELETE", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/apis/user/{userId}/cancelFriendRequest/{friendId}",
        produces = "*/*", 
        method = RequestMethod.DELETE)
    ResponseEntity<User> cancelFriendRequestUsingDELETE(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "friendId",required=true) @PathVariable("friendId") String friendId);


    @ApiOperation(value = "createUser", nickname = "createUserUsingPOST", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/user",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<User> createUserUsingPOST(@ApiParam(value = "user" ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "delete", nickname = "deleteUsingDELETE", notes = "", response = Boolean.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/apis/user",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.DELETE)
    ResponseEntity<Boolean> deleteUsingDELETE(@ApiParam(value = "user" ,required=true )  @Valid @RequestBody User user);


    @ApiOperation(value = "findAllFriendRequests", nickname = "findAllFriendRequestsUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/friendRequest/user/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findAllFriendRequestsUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "findByUserName", nickname = "findByUserNameUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/usersByName/{name}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findByUserNameUsingGET(@ApiParam(value = "name",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "findFriendRequestByname", nickname = "findFriendRequestBynameUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/{userId}/friendRequestByName/{name}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findFriendRequestBynameUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "name",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "findFriendsByname", nickname = "findFriendsBynameUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/{userId}/friendsByName/{name}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findFriendsBynameUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "name",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "findFriends", nickname = "findFriendsUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/user/{userId}/friends",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findFriendsUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "findOthersByname", nickname = "findOthersBynameUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/{userId}/othersByName/{name}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findOthersBynameUsingGET(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "name",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "findUserByName", nickname = "findUserByNameUsingGET", notes = "", response = User.class, responseContainer = "List", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/user/{name}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUserByNameUsingGET(@ApiParam(value = "name",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "friendRequest", nickname = "friendRequestUsingPOST", notes = "", tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/apis/createFriendRequest/user/{userId}/friend/{friendId}",
        method = RequestMethod.POST)
    ResponseEntity<Void> friendRequestUsingPOST(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "friendId",required=true) @PathVariable("friendId") String friendId);


    @ApiOperation(value = "unFriend", nickname = "unFriendUsingDELETE", notes = "", response = User.class, tags={ "user-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/apis/user/{userId}/unfriendUser/{friendId}",
        produces = "*/*", 
        method = RequestMethod.DELETE)
    ResponseEntity<User> unFriendUsingDELETE(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "friendId",required=true) @PathVariable("friendId") String friendId);

}
