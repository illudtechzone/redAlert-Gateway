/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.illud.redalert.client.red_alert_microservice.api;

import com.illud.redalert.client.red_alert_microservice.model.UserDetailsDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-05-31T11:55:41.697+05:30[Asia/Calcutta]")

@Api(value = "UserDetailsResource", description = "the UserDetailsResource API")
public interface UserDetailsResourceApi {

    @ApiOperation(value = "createUserDetails", nickname = "createUserDetailsUsingPOST", notes = "", response = UserDetailsDTO.class, tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<UserDetailsDTO> createUserDetailsUsingPOST(@ApiParam(value = "userDetailsDTO" ,required=true )  @Valid @RequestBody UserDetailsDTO userDetailsDTO);


    @ApiOperation(value = "deleteUserDetails", nickname = "deleteUserDetailsUsingDELETE", notes = "", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/api/user-details/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserDetailsUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "getAllContainingNames", nickname = "getAllContainingNamesUsingGET", notes = "", response = UserDetailsDTO.class, responseContainer = "List", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details-searchName/{searchName}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetailsDTO>> getAllContainingNamesUsingGET(@ApiParam(value = "searchName",required=true) @PathVariable("searchName") String searchName,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getAllDetailsByFirstName", nickname = "getAllDetailsByFirstNameUsingGET", notes = "", response = UserDetailsDTO.class, responseContainer = "List", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details-firstName/{firstName}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetailsDTO>> getAllDetailsByFirstNameUsingGET(@ApiParam(value = "firstName",required=true) @PathVariable("firstName") String firstName,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getAllDetailsByLastName", nickname = "getAllDetailsByLastNameUsingGET", notes = "", response = UserDetailsDTO.class, responseContainer = "List", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details-lastName/{lastName}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetailsDTO>> getAllDetailsByLastNameUsingGET(@ApiParam(value = "lastName",required=true) @PathVariable("lastName") String lastName,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getAllDetailsByUserId", nickname = "getAllDetailsByUserIdUsingGET1", notes = "", response = UserDetailsDTO.class, responseContainer = "List", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details-userId/{userId}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetailsDTO>> getAllDetailsByUserIdUsingGET1(@ApiParam(value = "userId",required=true) @PathVariable("userId") String userId,@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getAllUserDetails", nickname = "getAllUserDetailsUsingGET", notes = "", response = UserDetailsDTO.class, responseContainer = "List", tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<UserDetailsDTO>> getAllUserDetailsUsingGET(@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") @Valid @RequestParam(value = "sort", required = false) List<String> sort);


    @ApiOperation(value = "getUserDetails", nickname = "getUserDetailsUsingGET", notes = "", response = UserDetailsDTO.class, tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details/{id}",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<UserDetailsDTO> getUserDetailsUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id);


    @ApiOperation(value = "updateUserDetails", nickname = "updateUserDetailsUsingPUT", notes = "", response = UserDetailsDTO.class, tags={ "user-details-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDetailsDTO.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/user-details",
        produces = "*/*", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    ResponseEntity<UserDetailsDTO> updateUserDetailsUsingPUT(@ApiParam(value = "userDetailsDTO" ,required=true )  @Valid @RequestBody UserDetailsDTO userDetailsDTO);

}
